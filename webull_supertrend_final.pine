//@version=5
strategy("Supertrend MTF Strategy", 
         overlay=true, 
         initial_capital=100000, 
         commission_type=strategy.commission.percent, 
         commission_value=0.01)

// Declare all variables first
var float prevUpper = na
var float prevLower = na
var int trend = 1

// Input parameters
atrLen = input.int(10, "ATR Length", minval=1)
stFactor = input.float(3.0, "Supertrend Factor", minval=0.01, step=0.01)
tf5 = input.timeframe("5", "5 min timeframe")
tf15 = input.timeframe("15", "15 min timeframe") 
tf30 = input.timeframe("30", "30 min timeframe")
tf60 = input.timeframe("60", "1 hour timeframe")
minAlign = input.int(2, "Min timeframes aligned", minval=1, maxval=4)
volLen = input.int(20, "Volume MA Length", minval=1)
volMult = input.float(1.5, "Volume multiplier", step=0.1)
riskPct = input.float(1.0, "Risk % per trade", step=0.1)
takeProfitATR = input.float(2.0, "Take Profit ATR", step=0.1)
stopATR = input.float(1.0, "Stop Loss ATR", step=0.1)

// Calculate ATR and basic values
atr = ta.atr(atrLen)
hl2_val = (high + low) / 2

// Calculate bands
upperBand = hl2_val + (stFactor * atr)
lowerBand = hl2_val - (stFactor * atr)

// Update bands
upperBand := na(prevUpper) or close[1] > prevUpper ? upperBand : math.min(upperBand, prevUpper)
lowerBand := na(prevLower) or close[1] < prevLower ? lowerBand : math.max(lowerBand, prevLower)

// Update trend
trend := na(trend[1]) ? 1 : close <= lowerBand[1] ? -1 : close >= upperBand[1] ? 1 : trend[1]

// Calculate supertrend
supertrend = trend == 1 ? lowerBand : upperBand

// Update previous values
prevUpper := upperBand
prevLower := lowerBand

// Get multi-timeframe values
trend15 = request.security(syminfo.tickerid, tf15, trend)
trend30 = request.security(syminfo.tickerid, tf30, trend)
trend60 = request.security(syminfo.tickerid, tf60, trend)

// Count aligned timeframes
alignedUp = (trend15 > 0 ? 1 : 0) + (trend30 > 0 ? 1 : 0) + (trend60 > 0 ? 1 : 0)
alignedDown = (trend15 < 0 ? 1 : 0) + (trend30 < 0 ? 1 : 0) + (trend60 < 0 ? 1 : 0)

// Volume filter
volMA = ta.sma(volume, volLen)
highVolume = volume > volMA * volMult

// Trend conditions
isUptrend = trend > 0
isDowntrend = trend < 0
trendFlipUp = trend[1] <= 0 and trend > 0
trendFlipDown = trend[1] >= 0 and trend < 0

// Entry conditions
longCondition = trendFlipUp and alignedUp >= minAlign and highVolume
shortCondition = trendFlipDown and alignedDown >= minAlign and highVolume

// Position sizing
equity = strategy.equity
stopDistance = atr * stopATR
positionValue = equity * (riskPct / 100.0)
shares = positionValue / stopDistance

// Entry orders
if longCondition and strategy.position_size <= 0
    strategy.entry("Long", strategy.long, qty=shares)

if shortCondition and strategy.position_size >= 0
    strategy.entry("Short", strategy.short, qty=shares)

// Exit levels
longTP = strategy.position_avg_price + (takeProfitATR * atr)
longSL = strategy.position_avg_price - stopDistance
shortTP = strategy.position_avg_price - (takeProfitATR * atr)
shortSL = strategy.position_avg_price + stopDistance

// Exit orders
if strategy.position_size > 0
    strategy.exit("Long Exit", "Long", stop=longSL, limit=longTP)
if strategy.position_size < 0
    strategy.exit("Short Exit", "Short", stop=shortSL, limit=shortTP)

// Colors
upColor = color.green
downColor = color.red

// Plotting
plot(isUptrend ? supertrend : na, "Supertrend Up", color=upColor, linewidth=2)
plot(isDowntrend ? supertrend : na, "Supertrend Down", color=downColor, linewidth=2)

plotshape(longCondition, "Long Signal", shape.triangleup, location.belowbar, upColor, size=size.small)
plotshape(shortCondition, "Short Signal", shape.triangledown, location.abovebar, downColor, size=size.small)

// Alerts
alertcondition(longCondition, "Long Entry", "Long signal generated")
alertcondition(shortCondition, "Short Entry", "Short signal generated")